{"version":3,"sources":["components/Toolbar/Toolbar.jsx","actions/allcharacters.js","actions/episodes.js","Mode/SpoilerMode.js","components/HoCLoadState.jsx","pages/Episodes/Seasons.jsx","pages/Char/Characters.jsx","pages/Home/Home.jsx","pages/NotFound/NotFound.jsx","reducers/allchars.reducer.js","saga/characters/index.js","saga/episodes/index.js","saga/index.js","reducers/episodes.reducer.js","store/store.js","hooks/useGetRandomQuoteId.js","pages/Char/CharPortrait.jsx","pages/Char/CharDetails.jsx","hooks/useGetQuotes.js","pages/Char/Char.jsx","pages/Assassins/Assassins.jsx","pages/Episodes/Season.jsx","pages/Episodes/Episode.jsx","hooks/useGetDeathsByEpisode.js","pages/SearchResult/SearchResult.jsx","App.js","reportWebVitals.js","index.js"],"names":["routes","id","path","name","Toolbar","value","setValue","useState","searchValue","setSearchValue","history","useHistory","Navbar","className","variant","Brand","to","Nav","map","route","Link","as","NavLink","activeClassName","Form","inline","Check","type","checked","activated","onChange","label","FormControl","placeholder","event","target","Button","onClick","length","alert","push","ALL_CHARS_CALL","ALL_CHARS_RESPONSE","ALL_CHARS_ERROR","getAllChars","EPISODES_CALL","EPISODES_RESPONSE","EPISODES_ERROR","spoilerContext","React","createContext","SpoilerProvider","Provider","SpoilerConsumer","Consumer","withSpoilers","Component","props","spoiler","withLoadedState","connect","state","episodes","chars","characters","dispatch","getEpisodes","getChars","useEffect","data","SeasonsRedux","seasons","episode","season","trim","it","Set","values","Array","from","getSeasons","listItemStyle","backgroundColor","margin","color","width","style","paddingTop","loading","Spinner","animation","ListGroup","Item","handleClick","action","CharactersRedux","size","setSize","slice","char","char_id","error","HomeThemable","Card","fontFamily","Img","src","Body","Title","fontSize","fontWeight","Text","NotFound","initialChars","allCharsReducer","payload","charactersSaga","watchGetAllCharsAsync","getUsers","spawn","takeEvery","call","axios","get","all","replace","response","allKills","find","deathData","deathCount","put","console","log","episodesSaga","watchGetEpisodes","rootSaga","initialEpisodes","episodesReducer","createStore","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","store","createStoreRedux","combineReducers","applyMiddleware","run","sagas","CharPortrait","this","children","height","image","CharDetails","showQuotes","setShowQuotes","setData","helperFunction","nameCorrect","then","catch","useGetRandomQuote","allQuotes","useGetQuotes","img","quote","quote_id","marginTop","birthday","status","nickname","portrayed","maxWidth","occupation","job","CharRedux","useParams","desc","a","b","asc","AssassinsRedux","list","sort","setSort","Table","bordered","SeasonRedux","filterEpisodes","filter","ep","episode_id","title","EpisodeRedux","episodeSearched","deaths","episodeDeaths","death","useGetDeathByEpisode","charsFiltered","includes","air_date","block","ResultsRedux","location","window","search","substr","App","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.475ed962.chunk.js","sourcesContent":["import './Toolbar.css';\r\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport propTypes from 'prop-types';\r\n\r\nconst routes = [\r\n  {\r\n    id: 1,\r\n    path: '/home',\r\n    name: 'Home',\r\n  },\r\n  {\r\n    id: 2,\r\n    path: '/seasons',\r\n    name: 'Seasons',\r\n  },\r\n  {\r\n    id: 3,\r\n    path: '/characters',\r\n    name: 'Characters',\r\n  },\r\n  {\r\n    id: 4,\r\n    path: '/assassins',\r\n    name: 'Assassins',\r\n  },\r\n];\r\n\r\nexport const Toolbar = ({ value, setValue }) => {\r\n  const handleChange = () => {\r\n    setValue({ activated: !value.activated });\r\n  };\r\n\r\n  const [searchValue, setSearchValue] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  const searchValueChange = (event) => {\r\n    setSearchValue(event.target.value);\r\n  };\r\n\r\n  const formSubmit = () => {\r\n    if (searchValue.length === 0) alert('Cant search with empty values');\r\n    else history.push(`/search?q=${searchValue}`);\r\n  };\r\n\r\n  return (\r\n    <Navbar className=\"bbColor\" variant=\"dark\">\r\n      <Navbar.Brand to=\"/home\">Breaking Bad Wiki</Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        {routes.map((route) => (\r\n          <Nav.Link\r\n            as={NavLink}\r\n            to={route.path}\r\n            activeClassName=\"active\"\r\n            key={route.id}\r\n          >\r\n            {route.name}\r\n          </Nav.Link>\r\n        ))}\r\n      </Nav>\r\n      <Form inline>\r\n        <Form.Check\r\n          type=\"switch\"\r\n          checked={value.activated}\r\n          onChange={handleChange}\r\n          id=\"custom-switch\"\r\n          label=\"Anti Spoiler Mode\"\r\n        />\r\n      </Form>\r\n      &nbsp; &nbsp;\r\n      <Form inline>\r\n        <FormControl\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          onChange={searchValueChange}\r\n          className=\"mr-sm-2\"\r\n        />\r\n        <Button variant=\"outline-success\" onClick={formSubmit}>\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nToolbar.propTypes = {\r\n  value: propTypes.object.isRequired,\r\n  setValue: propTypes.func.isRequired,\r\n};\r\n","export const ALL_CHARS_CALL = '@CHARS/ALL_CHARS_CALL';\r\nexport const ALL_CHARS_RESPONSE = '@CHARS/ALL_CHARS_RESPONSE';\r\nexport const ALL_CHARS_ERROR = '@CHARS/ALL_CHARS_ERROR';\r\n\r\nexport function getAllChars(){\r\n  return {\r\n    type: ALL_CHARS_CALL\r\n  }\r\n}","export const EPISODES_CALL = '@EPISODES/CALL';\r\nexport const EPISODES_RESPONSE = '@EPISODES/RESPONSE';\r\nexport const EPISODES_ERROR = '@EPISODES/ERROR';\r\n\r\nexport function getAllEpisodes(){\r\n  return {\r\n    type: EPISODES_CALL\r\n  }\r\n}","import React from 'react';\r\n\r\nexport const spoilerContext = React.createContext({ activated: false });\r\n\r\nexport const SpoilerProvider = spoilerContext.Provider;\r\nexport const SpoilerConsumer = spoilerContext.Consumer;\r\n\r\n// wrapper to avoid spoilers on the app\r\n\r\nexport const withSpoilers = (Component) => {\r\n  return (props) => (\r\n    <SpoilerConsumer>\r\n      {(value) => <Component {...props} spoiler={value}></Component>}\r\n    </SpoilerConsumer>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllChars } from '../actions/allcharacters';\r\nimport { getAllEpisodes } from '../actions/episodes';\r\nimport { withSpoilers } from '../Mode/SpoilerMode';\r\n\r\n/*\r\n  This component is used to wrap the pages and connect to redux's store,\r\n  this triggers the action to load the state in loading if u access for \r\n  any route in init, testing if the state is not already loaded\r\n*/\r\nexport const withLoadedState = (Component) => {\r\n  const WithLoadedStateComponent = ({\r\n    episodes,\r\n    getEpisodes,\r\n    chars,\r\n    getChars,\r\n    spoiler\r\n  }) => {\r\n\r\n    useEffect(() => {\r\n      chars.data.length == 0 && getChars();\r\n      episodes.data.length == 0 && getEpisodes();\r\n    }, [spoiler]);\r\n\r\n    return (\r\n      <Component\r\n        episodes={episodes}\r\n        chars={chars}\r\n        spoiler={spoiler}\r\n      ></Component>\r\n    );\r\n  };\r\n\r\n  function mapStateToProps(state) {\r\n    return {\r\n      episodes: state.episodes,\r\n      chars: state.characters\r\n    };\r\n  }\r\n\r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      getEpisodes: () => dispatch(getAllEpisodes()),\r\n      getChars: () => dispatch(getAllChars())\r\n    };\r\n  }\r\n\r\n  return connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(withSpoilers(WithLoadedStateComponent));\r\n};\r\n","import React from 'react';\r\nimport { ListGroup, Spinner } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\n\r\nexport const Seasons = ({episodes, getEpisodes, spoiler}) => {\r\n\r\n  const history = useHistory();\r\n\r\n  const getSeasons = () => {\r\n    const seasons = episodes.data.map(episode => episode.season.trim());\r\n    let s = new Set(seasons);\r\n    let it = s.values();\r\n    return Array.from(it);\r\n  }\r\n\r\n  const handleClick = (season) => {\r\n    history.push(`/seasons/${season}`);\r\n  }\r\n\r\n  const seasons = episodes.data.length > 0 && getSeasons();\r\n\r\n  const listItemStyle = {\r\n    backgroundColor: '#0C5533',\r\n    margin: '6px',\r\n    color: 'white',\r\n    width: '450px'\r\n  }\r\n\r\n  return (\r\n    <div style={{paddingTop: \"25px\"}}>\r\n      {episodes.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      <ListGroup>\r\n        {seasons && seasons.map(season => \r\n            <ListGroup.Item style={listItemStyle} onClick={() => handleClick(season)} action key={season}>Season {season}</ListGroup.Item>\r\n        )}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport const SeasonsRedux = withLoadedState(Seasons);","import React, { useState } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { Button, ListGroup, Spinner } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\n\r\nexport const Characters = ({ chars }) => {\r\n  //State helping to paginate data\r\n  const [size, setSize] = useState(10);\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    history.push(`/characters/${id}`);\r\n  };\r\n\r\n  const listItemStyle = {\r\n    backgroundColor: '#0C5533',\r\n    margin: '6px',\r\n    color: 'white',\r\n    width: '450px',\r\n  };\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"2rem\" }}>\r\n      {chars.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      <ListGroup>\r\n        {chars.data.length > 0 &&\r\n          chars.data.slice(0, size).map((char) => (\r\n            <ListGroup.Item\r\n              onClick={() => handleClick(char.char_id)}\r\n              style={listItemStyle}\r\n              action\r\n              key={char.char_id}\r\n            >\r\n              {char.name}\r\n            </ListGroup.Item>\r\n          ))}\r\n      </ListGroup>\r\n      {size < chars.data.length && (\r\n        <Button\r\n          variant=\"warning\"\r\n          style={{ margin: \"20px\" }}\r\n          onClick={() => setSize(size + 10)}\r\n        >\r\n          Load more\r\n        </Button>\r\n      )}\r\n      {chars.error && <h1>Can't load data, try later.</h1>}\r\n    </div>\r\n  );\r\n};\r\n\r\nCharacters.propTypes = {\r\n  chars: propTypes.object.isRequired,\r\n};\r\n\r\nexport const CharactersRedux = withLoadedState(Characters);\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { withSpoilers } from '../../Mode/SpoilerMode';\r\n\r\nexport const Home = () => {\r\n  const cardStyles = {\r\n    width: '60rem',\r\n    backgroundColor: '#0C5533',\r\n    fontFamily: 'serif',\r\n  };\r\n  const cardTitleStyles = { fontSize: '30px', fontWeight: 'bold' };\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"40px\" }}>\r\n      <Card style={cardStyles}>\r\n        <Card.Img variant=\"top\" src=\"./assets/cardHeader.jpg\" />\r\n        <Card.Body>\r\n          <Card.Title style={cardTitleStyles}>\r\n            Welcome to Breaking Bad Wiki\r\n          </Card.Title>\r\n          <Card.Text>\r\n            If you want to avoid spoilers, you can use our spoiler free mode! It\r\n            will hide all information about characters deaths.\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const HomeThemable = withSpoilers(Home);\r\n","import React from 'react';\r\n\r\nexport const NotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1>ERROR 404</h1>\r\n      <h3>PAGE NOT FOUND</h3>\r\n      <img src=\"https://i.gifer.com/jge.gif\"/>\r\n    </div>\r\n  );\r\n};","import {\r\n  ALL_CHARS_CALL,\r\n  ALL_CHARS_RESPONSE,\r\n  ALL_CHARS_ERROR,\r\n} from '../actions/allcharacters';\r\n\r\nconst initialChars = {\r\n  loading: false,\r\n  data: [],\r\n  error: false,\r\n};\r\n\r\nexport function allCharsReducer(state = initialChars, action) {\r\n  switch (action.type) {\r\n    case ALL_CHARS_CALL:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    case ALL_CHARS_RESPONSE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n        error: false,\r\n      };\r\n    case ALL_CHARS_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: [],\r\n        error: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { spawn, takeEvery, put, call, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ALL_CHARS_CALL,\r\n  ALL_CHARS_ERROR,\r\n  ALL_CHARS_RESPONSE,\r\n} from '../../actions/allcharacters';\r\n\r\nexport default function* charactersSaga() {\r\n  yield spawn(watchGetAllCharsAsync);\r\n}\r\n\r\nfunction* watchGetAllCharsAsync() {\r\n  yield takeEvery(ALL_CHARS_CALL, getUsers);\r\n}\r\n\r\nfunction* getUsers() {\r\n  try {\r\n    const chars = yield call(\r\n      axios.get,\r\n      'https://breakingbadapi.com/api/characters'\r\n    );\r\n    //Getting the death count by every char at the beginning, as a new field\r\n    //of the array in state, so I don't have to load them all in the assassins tab\r\n    const data = yield all(\r\n      chars.data.map((char) => {\r\n        return call(\r\n          axios.get,\r\n          `https://breakingbadapi.com/api/death-count?name=${char.name.replace(\r\n            ' ',\r\n            '+'\r\n          )}`\r\n        );\r\n      })\r\n    );\r\n\r\n    const response = chars.data.map((char) => {\r\n      const allKills = data.find((deathData) => {\r\n        //The cousins Marco and Leonel were not together on the Death Count, just found Marco\r\n        if (\r\n          deathData.data[0].name === 'Marco ' &&\r\n          char.name === 'Marco & Leonel Salamanca'\r\n        ) {\r\n          return true;\r\n        } else return deathData.data[0].name === char.name;\r\n      });\r\n      return { ...char, deathCount: allKills.data[0].deathCount };\r\n    });\r\n    yield put({ type: ALL_CHARS_RESPONSE, payload: response });\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put({\r\n      type: ALL_CHARS_ERROR,\r\n      payload: error,\r\n    });\r\n  }\r\n}\r\n","import { spawn, takeEvery, put, call} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  EPISODES_CALL,\r\n  EPISODES_RESPONSE,\r\n  EPISODES_ERROR,\r\n} from '../../actions/episodes';\r\n\r\nexport default function* episodesSaga() {\r\n  yield spawn(watchGetEpisodes);\r\n}\r\n\r\nfunction* watchGetEpisodes() {\r\n  yield takeEvery(EPISODES_CALL, getEpisodes);\r\n}\r\n\r\nfunction* getEpisodes() {\r\n  try {\r\n    const response = yield call(\r\n      axios.get,\r\n      'https://breakingbadapi.com/api/episodes?series=Breaking+Bad'\r\n    );\r\n    yield put({ type: EPISODES_RESPONSE, payload: response.data });\r\n  } catch (error) {\r\n    yield put({\r\n      type: EPISODES_ERROR,\r\n      payload: error,\r\n    });\r\n  }\r\n}\r\n","import { spawn } from 'redux-saga/effects';\r\nimport characters from './characters';\r\nimport episodes from './episodes';\r\n\r\nexport default function* rootSaga(){\r\n  yield spawn(characters);\r\n  yield spawn(episodes);\r\n}","import {\r\n  EPISODES_CALL,\r\n  EPISODES_RESPONSE,\r\n  EPISODES_ERROR,\r\n} from '../actions/episodes';\r\n\r\nconst initialEpisodes = {\r\n  loading: false,\r\n  data: [],\r\n  error: false,\r\n};\r\n\r\nexport function episodesReducer(state = initialEpisodes, action) {\r\n  switch (action.type) {\r\n    case EPISODES_CALL:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    case EPISODES_RESPONSE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: action.payload,\r\n        error: false,\r\n      };\r\n    case EPISODES_ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: [],\r\n        error: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { allCharsReducer } from '../reducers/allchars.reducer';\r\nimport {\r\n  createStore as createStoreRedux,\r\n  applyMiddleware,\r\n  combineReducers,\r\n} from 'redux';\r\nimport sagas from '../saga';\r\nimport { episodesReducer } from '../reducers/episodes.reducer';\r\n\r\nexport function createStore() {\r\n  const composeEnhancers = composeWithDevTools({});\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const store = createStoreRedux(\r\n    combineReducers({ characters: allCharsReducer, episodes: episodesReducer }),\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n  );\r\n  sagaMiddleware.run(sagas);\r\n  return store;\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nconst API_QUOTES = 'https://breakingbadapi.com/api/quote/random?author=';\r\n\r\nexport const useGetRandomQuote = (name) => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    helperFunction(name);\r\n  }, []);\r\n\r\n  const helperFunction = (name) => {\r\n    // Gustavo Fring is shorted on quotes, as Gus Fring\r\n    const nameCorrect = name === 'Gustavo Fring' ? 'Gus Fring' : name;\r\n    axios\r\n      .get(`${API_QUOTES}${nameCorrect.replace(' ', '+')}`)\r\n      .then((response) => {\r\n        setData(response.data[0]);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  //Decided to return the helper function to refresh the random quote picked\r\n  return {\r\n    helperFunction,\r\n    data\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nexport class CharPortrait extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card style={{ width: \"350px\", backgroundColor: \"#0C5533\" }}>\r\n        <Card.Body>\r\n          <Card.Text>{this.props.children}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Img\r\n          style={{ height: \"450px\" }}\r\n          variant=\"bottom\"\r\n          src={this.props.image}\r\n        />\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useGetRandomQuote } from '../../hooks/useGetRandomQuoteId';\r\nimport { useGetQuotes } from '../../hooks/useGetQuotes';\r\nimport './CharDetails.css';\r\nimport { CharPortrait } from './CharPortrait';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nexport const CharDetails = ({ char, spoiler }) => {\r\n  const [showQuotes, setShowQuotes] = useState(false);\r\n\r\n  const { helperFunction, data } = useGetRandomQuote(char.name);\r\n  const allQuotes = useGetQuotes(char.name);\r\n\r\n  return (\r\n    <div className=\"divDetails\">\r\n      <CharPortrait image={char.img}>{char.name}</CharPortrait>\r\n      {data && (\r\n        <div>\r\n          <p key={data.quote_id}> Random quote: {data.quote}</p>\r\n          <Button variant=\"warning\" onClick={() => helperFunction(char.name)}>Refresh random quote</Button>\r\n          &nbsp;\r\n          <Button variant=\"warning\" onClick={() => setShowQuotes(!showQuotes)}>\r\n            toggle quotes\r\n          </Button>\r\n        </div>\r\n      )}\r\n      {showQuotes && (\r\n          allQuotes.map((quote) => (\r\n            <p key={quote.quote_id}>{quote.quote}</p>\r\n          ))\r\n      )}\r\n      <h3 style={{ marginTop: \"50px\" }}>Information</h3>\r\n      <p>\r\n        Death Count: {spoiler.activated ? \"SPOILER\" : char.deathCount}\r\n      </p>\r\n      <p>Birthday: {char.birthday}</p>\r\n      <p>Status: {spoiler.activated ? \"SPOILER\" : char.status}</p>\r\n      <p>Nickname: {char.nickname}</p>\r\n      <p>Portrayed by: {char.portrayed}</p>\r\n      <div style={{ maxWidth: \"700px\" }}>\r\n        Occupations:\r\n        {char.occupation.map((job) => job)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nconst API_QUOTES = 'https://breakingbadapi.com/api/quote?author=';\r\n\r\nexport const useGetQuotes = (name) => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    // Gustavo Fring is shorted on quotes, as Gus Fring\r\n    const nameCorrect = name === 'Gustavo Fring' ? 'Gus Fring' : name;\r\n    axios\r\n      .get(`${API_QUOTES}${nameCorrect.replace(' ', '+')}`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  return data;\r\n};\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { useParams } from 'react-router';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\nimport { CharDetails } from './CharDetails';\r\n\r\nexport const Char = ({ chars, spoiler }) => {\r\n  let { id } = useParams();\r\n\r\n  const char = chars.data.find((char) => char.char_id == id);\r\n\r\n  return (\r\n    <div>\r\n      {chars.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {char ? (\r\n        <CharDetails char={char} spoiler={spoiler}></CharDetails>\r\n      ) : (\r\n        !chars.loading && \"Not Found\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CharRedux = withLoadedState(Char);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Spinner, Table } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { getAllChars } from '../../actions/allcharacters';\r\nimport { withSpoilers } from '../../Mode/SpoilerMode';\r\nimport './Assassins.css';\r\n\r\nconst desc = (a, b) => {\r\n  if (a.deathCount < b.deathCount) {\r\n    return 1;\r\n  }\r\n  if (a.deathCount > b.deathCount) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst asc = (a, b) => {\r\n  if (a.deathCount < b.deathCount) {\r\n    return -1;\r\n  }\r\n  if (a.deathCount > b.deathCount) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const Assassins = ({ chars, loading, getChars, spoiler }) => {\r\n  const [sort, setSort] = useState(false);\r\n\r\n  useEffect(() => {\r\n    chars.length == 0 && getChars();\r\n  }, [spoiler, sort]);\r\n\r\n\r\n  const handleClick = () => {\r\n    setSort(!sort);\r\n    if (sort) {\r\n      chars.sort(desc);\r\n    } else {\r\n      chars.sort(asc);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainDiv\">\r\n      {loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {chars.length > 0 && (\r\n        <div>\r\n          <Table bordered>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>\r\n                  Death Count{\" \"}\r\n                  <Button variant=\"light\" onClick={handleClick}>\r\n                    ⇵\r\n                  </Button>\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {chars.map((char) => {\r\n                if (char.deathCount > 0) {\r\n                  return (\r\n                    <tr key={char.char_id}>\r\n                      <td>{char.name}</td>\r\n                      <td>\r\n                        {!spoiler.activated ? char.deathCount : \"SPOILER\"}\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const list = [...state.characters.data];\r\n  list.sort(desc);\r\n  //The list I like to props from state is a copy of the original one but already sorted\r\n  //by deathCount, so I can dinamically change the sort order without affecting main list\r\n  return {\r\n    chars: list,\r\n    loading: state.characters.loading\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    getChars: () => dispatch(getAllChars())\r\n  };\r\n}\r\n\r\nexport const AssassinsRedux = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withSpoilers(Assassins));\r\n","import React from 'react';\r\nimport { ListGroup, Spinner } from 'react-bootstrap';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\n\r\nexport const Season = ({ episodes }) => {\r\n  let { id } = useParams();\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    history.push(`/episode/${id}`);\r\n  };\r\n\r\n  const filterEpisodes = episodes.data.filter((episode) => {\r\n    if (episode.season == id) return episode;\r\n  });\r\n\r\n  const listItemStyle = {\r\n    backgroundColor: '#0C5533',\r\n    margin: '6px',\r\n    color: 'white',\r\n    width: '450px',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {episodes.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {episodes.data.length > 0 && <h2>Season {id}</h2>}\r\n      <ListGroup>\r\n        {filterEpisodes &&\r\n          filterEpisodes.map((ep) => (\r\n            <ListGroup.Item\r\n              style={listItemStyle}\r\n              onClick={() => handleClick(ep.episode_id)}\r\n              action\r\n              key={ep.episode_id}\r\n            >\r\n              Episode {ep.episode}: {ep.title}\r\n            </ListGroup.Item>\r\n          ))}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SeasonRedux = withLoadedState(Season);\r\n","import React from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { useGetDeathByEpisode } from '../../hooks/useGetDeathsByEpisode';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\n\r\nexport const Episode = ({ episodes, spoiler, chars }) => {\r\n  let { id } = useParams();\r\n  const history = useHistory();\r\n\r\n  const handleClick = (id) => {\r\n    history.push(`/characters/${id}`);\r\n  };\r\n\r\n  const episodeSearched = episodes.data.find((episode) => {\r\n    if (episode.episode_id == id) return episode;\r\n  });\r\n\r\n  const deaths = useGetDeathByEpisode(\r\n    episodeSearched?.episode,\r\n    episodeSearched?.season\r\n  );\r\n\r\n  const charsFiltered = chars.data.filter((char) => {\r\n    if (\r\n      episodeSearched.characters.includes(char.name) ||\r\n      episodeSearched.characters.includes(char.nickname)\r\n    )\r\n      return char;\r\n  });\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"2rem\" }}>\r\n      {episodes.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {episodeSearched && (\r\n        <div>\r\n          <h1>Title: {episodeSearched.title}</h1>\r\n          <h4>Episode number in season: {episodeSearched.episode}</h4>\r\n          <h4>Air date: {episodeSearched.air_date}</h4>\r\n        </div>\r\n      )}\r\n      {charsFiltered.length > 0 ? (\r\n        <div>\r\n          <h4>Characters appearing:</h4>\r\n          {charsFiltered.map((char) => {\r\n            return (\r\n              <Button\r\n                size=\"sm\"\r\n                block\r\n                variant=\"link\"\r\n                key={char.char_id}\r\n                onClick={() => handleClick(char.char_id)}\r\n              >\r\n                {char.name}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <Spinner animation=\"border\" variant=\"success\" />\r\n      )}\r\n      <h4>Deaths: </h4>\r\n      {!spoiler.activated ? (\r\n        deaths.map((death) => <h5 key={death}>{death}</h5>)\r\n      ) : (\r\n        <h5>Spoiler</h5>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const EpisodeRedux = withLoadedState(Episode);\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nconst API_DEATHS = 'https://breakingbadapi.com/api/deaths';\r\n\r\nexport const useGetDeathByEpisode = (episode, season) => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(API_DEATHS)\r\n      .then((response) => {\r\n        const episodeDeaths = response.data.map((death) => {\r\n          if (death.episode === +episode && death.season === +season) {\r\n            return death.death;\r\n          }\r\n        });\r\n        setData(episodeDeaths);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  return data;\r\n};\r\n","import React from 'react';\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router';\r\nimport { withLoadedState } from '../../components/HoCLoadState';\r\n\r\nexport const Results = ({ chars, episodes }) => {\r\n  const location = window.location.search\r\n    .substr(3, window.location.search.length)\r\n    .replace('%20', ' ');\r\n\r\n  const history = useHistory();\r\n\r\n  const clickChar = (id) => {\r\n    history.push(`/characters/${id}`);\r\n  };\r\n\r\n  const clickEpisode = (id) => {\r\n    history.push(`/episode/${id}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Results for: {location}</h2>\r\n      <h3>Characters: </h3>\r\n      {chars.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {chars.data.length > 0 &&\r\n        chars.data.map((char) => {\r\n          if (char.name.includes(location))\r\n            return (\r\n              <Button\r\n                size=\"sm\"\r\n                onClick={() => clickChar(char.char_id)}\r\n                block\r\n                variant=\"link\"\r\n                key={char.char_id}\r\n              >\r\n                {char.name}\r\n              </Button>\r\n            );\r\n        })}\r\n      <h3>Episodes: </h3>\r\n      {episodes.loading && <Spinner animation=\"border\" variant=\"success\" />}\r\n      {episodes.data.length > 0 &&\r\n        episodes.data.map((ep) => {\r\n          if (ep.title.includes(location) || ep.characters.includes(location))\r\n            return (\r\n              <Button\r\n                size=\"sm\"\r\n                block\r\n                onClick={() => clickEpisode(ep.episode_id)}\r\n                variant=\"link\"\r\n                key={ep.episode_id}\r\n              >\r\n                {ep.title}\r\n              </Button>\r\n            );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ResultsRedux = withLoadedState(Results);\r\n","import './App.css';\nimport { Toolbar } from './components/Toolbar/Toolbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport { SeasonsRedux } from './pages/Episodes/Seasons';\nimport { CharactersRedux } from './pages/Char/Characters';\nimport { HomeThemable } from './pages/Home/Home';\nimport { SpoilerProvider } from './Mode/SpoilerMode';\nimport { NotFound } from './pages/NotFound/NotFound';\nimport { Provider } from 'react-redux';\nimport { createStore } from './store/store';\nimport { CharRedux } from './pages/Char/Char';\nimport { AssassinsRedux } from './pages/Assassins/Assassins';\nimport { SeasonRedux } from './pages/Episodes/Season';\nimport { EpisodeRedux } from './pages/Episodes/Episode';\nimport { ResultsRedux } from './pages/SearchResult/SearchResult';\n\nfunction App() {\n  const [value, setValue] = useState({ activated: false });\n\n  return (\n    <>\n      <Provider store={createStore()}>\n        <SpoilerProvider value={value}>\n          <Router>\n            <Toolbar value={value} setValue={setValue}></Toolbar>\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <Switch>\n                  <Route exact path=\"/\">\n                    <Redirect to=\"/home\" />\n                  </Route>\n                  <Route exact path=\"/home\" component={HomeThemable}></Route>\n                  <Route exact path=\"/seasons\" component={SeasonsRedux}></Route>\n                  <Route\n                    exact\n                    path=\"/seasons/:id\"\n                    component={SeasonRedux}\n                  ></Route>\n                  <Route\n                    exact\n                    path=\"/episode/:id\"\n                    component={EpisodeRedux}\n                  ></Route>\n                  <Route\n                    exact\n                    path=\"/characters\"\n                    component={CharactersRedux}\n                  ></Route>\n                  <Route\n                    exact\n                    path=\"/characters/:id\"\n                    component={CharRedux}\n                  ></Route>\n                  <Route\n                    exact\n                    path=\"/assassins\"\n                    component={AssassinsRedux}\n                  ></Route>\n                  <Route exact path=\"/search\" component={ResultsRedux}></Route>\n                  <Route component={NotFound}></Route>\n                </Switch>\n              </header>\n            </div>\n          </Router>\n        </SpoilerProvider>\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}